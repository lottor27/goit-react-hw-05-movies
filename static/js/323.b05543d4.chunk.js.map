{"version":3,"file":"static/js/323.b05543d4.chunk.js","mappings":"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","sources":["ServiceApi/AllApiFetch.jsx","components/Loader/Loader.jsx","components/ReviewsList/ReviewsList.jsx","../node_modules/nanoid/index.browser.js","components/Reviews/Reviews.jsx"],"sourcesContent":["// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews запрос обзоров для страницы кинофильма.\n\n\n\n\n\nimport axios from 'axios'\n\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/'\n\nconst options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MWY1ZmQ4ZGMwZDZkNWUzNmE0MTk2NTgzYzVjMTQ5ZSIsInN1YiI6IjY0ZDI5ODNlODUwOTBmMDE0NDVkMTZhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.cCL_vkXeZRKopM-L3r01YH3xygP-PT4RBaXjsS3_dWE',\n    },\n};\n\n\nexport const getAllTrendingFilms = async () => {\n\tconst { data } = await axios(`3/trending/movie/week?language=en-US`, options)\n\treturn data\n}\n\nexport const getTrendingFilm = async () => {\n\tconst { data } = await axios(`3/trending/movie/day?language=en-US`, options)\n\treturn data\n}\n\n\nexport const getAllSearchFilms = async (query) => {\n\tconst { data } = await axios(`3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`, options)\n\treturn data\n}\n\nexport const getAllFilmsDetails = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}?language=en-US`, options)\n\treturn data\n}\n\nexport const getAllFilmsCredits = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}/credits?language=en-US`, options)\n\treturn data\n}\n\n\nexport const getAllFilmsReviews = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}/reviews?language=en-US&page=1`, options)\n\treturn data\n}\n\nexport const getPosterMovie = (pathToPoster) => {\n  return `https://image.tmdb.org/t/p/original${pathToPoster}`\n}\n\n\n","import { Rings } from  'react-loader-spinner'\n\nconst Loader = () => {\n<Rings\n  height=\"80\"\n  width=\"80\"\n  color=\"#4fa94d\"\n  radius=\"6\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n  ariaLabel=\"rings-loading\"\n/>\n    \n  }\n  \nexport default Loader","import { nanoid } from 'nanoid'\nimport React from 'react'\n\n\nconst ReviewsList = ({ reviewsResults }) => {\n  \n\n\n    return (\n        <div className=\"accordion\" id=\"accordionExample\" >\n        {reviewsResults.map(review => {\n          const colapsId = nanoid();\n            const check = `#${colapsId}`;\n                return (\n                  <div className=\"accordion-item\" key={review.id}>\n                    <h2 className=\"accordion-header\">\n                      <button\n                        className=\"accordion-button\"\n                        type=\"button\"\n                        data-bs-toggle=\"collapse\"\n                        data-bs-target={check}\n                        aria-expanded=\"true\"\n                        aria-controls={colapsId}\n                      >\n                        {review.author}\n                      </button>\n                    </h2>\n                    <div\n                      id={colapsId}\n                      className=\"accordion-collapse collapse hide\"\n                      data-bs-parent=\"#accordionExample\"\n                    >\n                      <div className=\"accordion-body\">{review.content}</div>\n                    </div>\n                  </div>\n                );\n            })}\n        </div>\n    )\n}\n\nexport default ReviewsList","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import Loader from \"components/Loader/Loader\";\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { getAllFilmsReviews } from \"ServiceApi/AllApiFetch\"\nimport ReviewsList from \"components/ReviewsList/ReviewsList\";\n\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviewsResults, setCastResults] = useState(null);\n    const [Error, setError] = useState('');\n    const [isLoader, setIsLoader] = useState(false);\n\n    useEffect(() => {\n        const fetchMovieCast = async () => {\n            setIsLoader(true);\n            setError('');\n            try {\n                const data = await getAllFilmsReviews(movieId);\n                if (data.results.length > 0) setCastResults(data.results);\n            }\n            catch (error) {\n                setError(error.message);\n                console.log(Error)\n            } finally {\n                setIsLoader(false);\n            }\n        }\n        fetchMovieCast()\n    }, [Error, movieId])\n\n\n    return (\n        <div>\n            {isLoader && <Loader />}\n            <h2>Reviews</h2>\n            {reviewsResults ?\n                <ReviewsList reviewsResults={reviewsResults} />\n                : (<p>We dont have any reviews for this movie</p>)}\n               </div> \n               )\n}\nexport default Reviews"],"names":["axios","options","method","headers","accept","Authorization","getAllTrendingFilms","data","getTrendingFilm","getAllSearchFilms","query","getAllFilmsDetails","movieId","getAllFilmsCredits","getAllFilmsReviews","reviewsResults","className","id","map","review","colapsId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","check","type","author","content","useParams","useState","setCastResults","Error","setError","isLoader","setIsLoader","useEffect","fetchMovieCast","results","length","message","console","log","Loader"],"sourceRoot":""}