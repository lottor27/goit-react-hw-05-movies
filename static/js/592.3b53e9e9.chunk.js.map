{"version":3,"file":"static/js/592.3b53e9e9.chunk.js","mappings":"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","sources":["ServiceApi/AllApiFetch.jsx","components/Loader/Loader.jsx","components/Search/Search.jsx","components/SearchResults/SearchResults.jsx","pages/Movies.jsx"],"sourcesContent":["// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews запрос обзоров для страницы кинофильма.\n\n\n\n\n\nimport axios from 'axios'\n\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/'\n\nconst options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MWY1ZmQ4ZGMwZDZkNWUzNmE0MTk2NTgzYzVjMTQ5ZSIsInN1YiI6IjY0ZDI5ODNlODUwOTBmMDE0NDVkMTZhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.cCL_vkXeZRKopM-L3r01YH3xygP-PT4RBaXjsS3_dWE',\n    },\n};\n\n\nexport const getAllTrendingFilms = async () => {\n\tconst { data } = await axios(`3/trending/movie/week?language=en-US`, options)\n\treturn data\n}\n\nexport const getTrendingFilm = async () => {\n\tconst { data } = await axios(`3/trending/movie/day?language=en-US`, options)\n\treturn data\n}\n\n\nexport const getAllSearchFilms = async (query) => {\n\tconst { data } = await axios(`3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`, options)\n\treturn data\n}\n\nexport const getAllFilmsDetails = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}?language=en-US`, options)\n\treturn data\n}\n\nexport const getAllFilmsCredits = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}/credits?language=en-US`, options)\n\treturn data\n}\n\n\nexport const getAllFilmsReviews = async (movieId) => {\n\tconst { data } = await axios(`3/movie/${movieId}/reviews?language=en-US&page=1`, options)\n\treturn data\n}\n\nexport const getPosterMovie = (pathToPoster) => {\n  return `https://image.tmdb.org/t/p/original${pathToPoster}`\n}\n\n\n","import { Rings } from  'react-loader-spinner'\n\nconst Loader = () => {\n<Rings\n  height=\"80\"\n  width=\"80\"\n  color=\"#4fa94d\"\n  radius=\"6\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n  ariaLabel=\"rings-loading\"\n/>\n    \n  }\n  \nexport default Loader","import React from \"react\";\nimport { useState } from \"react\";\n\nimport { useNavigate } from 'react-router-dom';\n\nconst SearchMovies = ({ onSearchSubmit }) => {\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const navigate = useNavigate();\n\n    const handleChange = (e) => {\n        setSearchQuery(e.currentTarget.value.toLowerCase().trim())\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (searchQuery === '') {\n            alert('Enter a search query!');\n            return\n        }\n        onSearchSubmit(searchQuery);\n        navigate(`/movies?query=${searchQuery}`);\n        setSearchQuery('');\n    }\n\n    return (\n      <div>\n        <form className=\"d-flex\" onSubmit={handleSubmit}>\n          <input\n            className=\"form-control me-2\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            aria-label=\"Search\"\n            placeholder=\"Search\"\n            onChange={handleChange}\n            value={searchQuery}\n          />\n          <button className=\"btn btn-outline-success\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n    );\n}\n\nexport default SearchMovies;\n\n","import React from 'react'\nimport { Link, useLocation } from 'react-router-dom';\nimport DefaultFilm from 'DefaultFilm.jpg'\n\n\nconst SearchResultsList = ({ arrayResults }) => {\n    const location = useLocation();\n\n    return (\n        <ul>\n            {arrayResults.map(arrayResult => {\n\n             \n               let posterIMG = `https://image.tmdb.org/t/p/original/${arrayResult.backdrop_path}`\n                \n                return (\n                  <div className=\"card mb-3\" key={arrayResult.id}>\n                    <div className=\"row g-0\">\n                      <div className=\"col-md-4\">\n                        <img\n                          src={\n                            arrayResult.backdrop_path ? posterIMG : DefaultFilm\n                          }\n                          className=\"img-fluid rounded-start\"\n                          alt={arrayResult.title}\n                        />\n                      </div>\n                      <div className=\"col-md-8\">\n                        <div className=\"card-body\">\n                          <Link\n                            to={`/movies/${arrayResult.id}`}\n                            state={{ from: location }}\n                            className=\"card-title\"\n                          >\n                            {arrayResult.title}{' '}\n                          </Link>\n                          <p className=\"card-text\">{arrayResult.overview}</p>\n                          <p className=\"card-text\">\n                            <small className=\"text-body-secondary\">\n                              10/{arrayResult.vote_average}\n                            </small>\n                          </p>\n                          <Link\n                            to={`/movies/${arrayResult.id}`}\n                            className=\"card-text\"\n                            state={{ from: location }}\n                          >\n                            {' '}\n                            Details.....\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n            })}\n        </ul>\n    )\n}\n\nexport default SearchResultsList\n\n","import React from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect, } from 'react';\nimport Loader from \"components/Loader/Loader\";\nimport SearchMovies from \"components/Search/Search\";\nimport SearchResultsList from \"components/SearchResults/SearchResults\";\nimport { getAllSearchFilms } from \"ServiceApi/AllApiFetch\"\n\nconst Movies = () => {\n    const [isLoader, setIsLoader] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [searchResults, setSearchResults] = useState(null);\n    const [searchParams] = useSearchParams();\n \n\n    useEffect(() => {\n        const fetchSearchMovies = async () => {\n            setIsLoader(true);\n            try {\n                const data = await getAllSearchFilms(searchQuery);\n                setSearchResults(data.results);\n                \n            }\n            catch (error) {\n                console.error(error.message);\n            } finally {\n                setIsLoader(false);\n            }\n        }\n        fetchSearchMovies(searchQuery)\n    }, [searchQuery]);\n\n    useEffect(() => {\n        const query = searchParams.get('query');\n        if (query) {\n            setSearchQuery(query);\n        }\n    }, [searchParams]);\n    useEffect(() => {\n        searchParams.set('query', searchQuery);\n    }, [searchParams, searchQuery]);\n\n\n    const onSearchSubmit = query => setSearchQuery(query);\n\n    return (<div>\n       {isLoader && <Loader />}\n       <SearchMovies onSearchSubmit={onSearchSubmit}/>\n       {searchResults &&\n                <SearchResultsList arrayResults={searchResults} />\n            }\n            \n      </div>\n    )\n}\n\nexport default Movies"],"names":["axios","options","method","headers","accept","Authorization","getAllTrendingFilms","data","getTrendingFilm","getAllSearchFilms","query","getAllFilmsDetails","movieId","getAllFilmsCredits","getAllFilmsReviews","onSearchSubmit","useState","searchQuery","setSearchQuery","navigate","useNavigate","className","onSubmit","e","preventDefault","alert","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","toLowerCase","trim","arrayResults","location","useLocation","map","arrayResult","posterIMG","backdrop_path","src","DefaultFilm","alt","title","to","id","state","from","overview","vote_average","isLoader","setIsLoader","searchResults","setSearchResults","useSearchParams","searchParams","useEffect","fetchSearchMovies","results","console","error","message","get","set","Loader","Search","SearchResults"],"sourceRoot":""}